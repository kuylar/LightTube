@using InnerTube
@using System.Text.Json
@using InnerTube.Exceptions
@using JsonSerializer = System.Text.Json.JsonSerializer
@model PlayerContext

@{
	bool playable = true;
}

@if (Model.Player is null)
{
	playable = false;
	@if (Model.Exception is not null)
	{
		@if (Model.Exception is PlayerException e)
		{
			<div class="player-error-container">
				<div class="player-error-icon">
					<svg class="icon" fill="currentColor" style="color: white;" width="128" height="128">
						<use xlink:href="/svg/bootstrap-icons.svg#exclamation-circle"></use>
					</svg>
				</div>
				<div class="player-error-info">
					@if (e.Code == "LOGIN_REQUIRED")
					{
						<div class="title" title="[@e.Code] @e.Error">@e.Error</div>
						<p class="ml-1">Please contact the instance administrator to include InnerTube login details</p>
					}
					else
					{
						<div class="title" title="[@e.Code] @e.Error">@e.Error</div>
						<p class="ml-1">@e.Description</p>
						@if (e.Code is "CONTENT_CHECK_REQUIRED" or "AGE_CHECK_REQUIRED")
						{
							<a href="@Context.Request.Path.ToString()@Context.Request.QueryString&contentCheckOk=true" class="btn-white">I understand and wish to proceed</a>
						}
					}
				</div>
			</div>
		}
		else
		{
			<div class="player-error-container">
				<div class="player-error-icon">
					<svg class="icon" fill="currentColor" style="color: white;" width="128" height="128">
						<use xlink:href="/svg/bootstrap-icons.svg#exclamation-circle"></use>
					</svg>
				</div>
				<div class="player-error-info">
					<div class="title">An error has occurred @(Model.Exception.GetType() == typeof(Exception) ? "" : $"({Model.Exception.GetType().Name})")</div>
					<p class="ml-1">@Model.Exception.Message</p>
					<p>
						This error might not occur in other instances. Find them <a href="https://github.com/lighttube-org/LightTube/blob/master/INSTANCES.md">here</a>
					</p>
				</div>
			</div>
		}
	}
	else
	{
		<div class="player-error-container">
			<div class="player-error-icon">
				<svg class="icon" fill="currentColor" style="color: white;" width="128" height="128">
					<use xlink:href="/svg/bootstrap-icons.svg#exclamation-circle"></use>
				</svg>
			</div>
			<div class="player-error-info">
				<div class="title">Failed to load the player</div>
				<p>
					This might not occur in other instances. Find them <a href="https://github.com/lighttube-org/LightTube/blob/master/INSTANCES.md">here</a>
				</p>
			</div>
		</div>
	}
}
else if ((Model.UseHls || Model.UseDash) && !Model.Player.Formats.Any())
{
	<video controls id="player" class="player @(Model.GetClass())" poster="@Model.Thumbnails.LastOrDefault()?.Url">
		@if (Configuration.ProxyEnabled)
		{
			@foreach (Format format in Model.GetFormatsInPreferredOrder())
			{
				@:<source label="@format.QualityLabel" type="@format.MimeType" src="@format.Url"> 
			}
		}
		else
		{
			@foreach (Format format in Model.GetFormatsInPreferredOrder())
			{
				@:<source label="@format.QualityLabel" type="@format.MimeType" src="/proxy/media/@Model.Player.Details.Id/@format.Itag"> 
			}
		}

		@foreach (InnerTubePlayer.VideoCaption subtitle in Model.Player.Captions)
		{
			@:<track src="/proxy/caption/@Model.Player.Details.Id/@subtitle.VssId" label="@subtitle.Label" kind="subtitles">
		}
	</video>
	<noscript style="z-index:999;color:white;position:relative;">This video requires JavaScript to play correctly</noscript>
}
else if (Model.Player.Formats.Any())
{
	<video controls id="player" class="player @(Model.GetClass())" poster="@Model.Thumbnails.LastOrDefault()?.Url">
		@if (Configuration.ProxyEnabled)
		{
			@foreach (Format format in Model.GetFormatsInPreferredOrder())
			{
				@:<source label="@format.QualityLabel" type="@format.MimeType" src="@format.Url"> 
			}
		}
		else
		{
			@foreach (Format format in Model.GetFormatsInPreferredOrder())
			{
				@:<source label="@format.QualityLabel" type="@format.MimeType" src="/proxy/media/@Model.Player.Details.Id/@format.Itag"> 
			}
		}

		@foreach (InnerTubePlayer.VideoCaption subtitle in Model.Player.Captions)
		{
			@:<track src="/proxy/caption/@Model.Player.Details.Id/@subtitle.VssId" label="@subtitle.Label" kind="subtitles">
		}
	</video>
}
else
{
	playable = false;
	<div class="player-error-container">
		<div class="player-error-icon">
			<svg class="icon" fill="currentColor" style="color: white;" width="128" height="128">
				<use xlink:href="/svg/bootstrap-icons.svg#exclamation-circle"></use>
			</svg>
		</div>
		<div class="player-error-info">
			<div class="title">An error has occurred</div>
			<p>No muxed formats were returned from YouTube</p>
		</div>
	</div>
}

@if (playable)
{
	<script id="video-data">
	const videoInfo = {
		author: {
			icon: "@Model.Video.Channel.Avatar",
			title: "@Model.Player!.Details.Author.Title", // .Replace("\"", "\\\"")
			href: "/channel/@Model.Player!.Details.Author.Id"
		},
		title: "@Model.Player!.Details.Title", // .Replace("\"", "\\\"")
		@if (Model.UseHls)
		{
			@:hlsManifest: "/proxy/media/@(Model.Player.Details.Id).m3u8",
		}
		buttons: {
			play: '<svg class="bi" width="20" height="20" fill="currentColor"><use href="/svg/bootstrap-icons.svg#play-fill"/></svg>',
			pause: '<svg class="bi" width="20" height="20" fill="currentColor"><use href="/svg/bootstrap-icons.svg#pause-fill"/></svg>',
			volumeMute: '<svg class="bi" width="20" height="20" fill="currentColor"><use href="/svg/bootstrap-icons.svg#volume-mute-fill"/></svg>',
			volumeLow: '<svg class="bi" width="20" height="20" fill="currentColor"><use href="/svg/bootstrap-icons.svg#volume-off-fill"/></svg>',
			volumeMedium: '<svg class="bi" width="20" height="20" fill="currentColor"><use href="/svg/bootstrap-icons.svg#volume-down-fill"/></svg>',
			volumeHigh: '<svg class="bi" width="20" height="20" fill="currentColor"><use href="/svg/bootstrap-icons.svg#volume-up-fill"/></svg>',
			settings: '<svg class="bi" width="20" height="20" fill="currentColor"><use href="/svg/bootstrap-icons.svg#gear-fill"/></svg>',
			fullscreen: '<svg class="bi" width="20" height="20" fill="currentColor"><use href="/svg/bootstrap-icons.svg#fullscreen"/></svg>',
			minimize: '<svg class="bi" width="20" height="20" fill="currentColor"><use href="/svg/bootstrap-icons.svg#fullscreen-exit"/></svg>'
		},
		loading: "<img style='width:15%;height:15%;' src='/svg/loading.svg'>",
		rememberVolume: true,
		chapters: @Html.Raw(Model.GetChaptersJson()),
		segments: [@Html.Raw(string.Join(',', Model.Sponsors?.Select(x => x.ToLTPlayerJson(Model.Player.Details.Length.TotalSeconds)) ?? Array.Empty<string>()))],
		endscreen: @Html.Raw(JsonSerializer.Serialize(Model.Player.Endscreen, new JsonSerializerOptions()
		           {
			           PropertyNamingPolicy = JsonNamingPolicy.CamelCase
		           })),
		@if (Model.Player.Storyboard.Levels.ContainsKey(0))
		{
			@:storyboard:{type:"yt_l1",src:"@Html.Raw(Model.Player.Storyboard.Levels[0].ToString())"}
		}
	};
	videoInfo.endscreen.onClickHandler = item => {
		switch (item.style) {
			case "VIDEO":
				window.location = "/watch?v=" + item.target;
				break;
			case "PLAYLIST":
				window.location = "/playlist?list=" + item.target;
				break;
			  case "CHANNEL":
				window.location = "/channel/" + item.target;
				break;
			  case "WEBSITE":
				window.open(item.href, "_blank");
				break;
			default:
				alert("Unknown endscreen item type: " + item.style)
				break;
		}
	};
	const videoId =  "@(Model.Player!.Details.Id)";
	const playerId = "player";
	const playtype = @Html.Raw(Model.UseHls ? "\"hls.js\"" : "undefined");
	</script>
}