@using InnerTube
@using InnerTube.Renderers
@using Utils = LightTube.Utils
@model ChannelContext

<div class="channel-container">
	@if (Model.Channel?.Header != null)
	{
		<div class="channel-banner">
			<img class="channel-banner__img" src="@Model.Channel.Header.Banner.Last().Url" alt="Channel Banner">
		</div>
		<div class="channel-info">
			<img class="channel-info__avatar" src="@Model.Channel.Metadata.Avatar.Last().Url" alt="@Model.Channel.Metadata.Title">
			<div class="channel-info__info">
				<span class="channel-info__name ml-1 title">@Model.Channel.Metadata.Title</span>
				<!--span class="channel-info__username">TODO</span-->
				<span class="channel-info__subs">@Model.Channel.Header?.SubscriberCountText</span>
			</div>
			<div class="flex-divider"></div>
			<div class="channel-info__buttons">
				<partial name="SubscribeButton" model="Model.Id"/>
			</div>
		</div>
	}
	<div class="channel-tabs">
		<div class="channel-tabs__container">
			@foreach (ChannelTabs tab in Model.Tabs.Where(x => x != ChannelTabs.Search))
			{
				<partial name="ChannelTabItem" model="@(tab, Model.Id)"/>
			}
		</div>
	</div>
	@switch (Model.CurrentTab)
	{
		case ChannelTabs.Videos or ChannelTabs.Live or ChannelTabs.Community:
		{
			<div class="channel-content search-container">
				@foreach (IRenderer renderer in Model.Content.Where(x => x is not ContinuationItemRenderer))
				{
					<partial name="Renderer" model="@renderer"/>
				}
			</div>
			break;
		}
		case ChannelTabs.Shorts:
		{
			<div class="channel-content reel-grid">
				@foreach (IRenderer renderer in Model.Content.Where(x => x is not ContinuationItemRenderer))
				{
					<partial name="Renderer" model="@renderer"/>
				}
			</div>
			break;
		}
		default:
		{
			<div class="channel-content">
				@foreach (IRenderer renderer in Model.Content.Where(x => x is not ContinuationItemRenderer))
				{
					<partial name="Renderer" model="@renderer"/>
				}
			</div>
			break;
		}
	}
</div>
@if (Model.Continuation is not null)
{
	<div class="next-page">
		<span></span>
		<span>•</span>
		<a href="@Utils.GetContinuationUrl(Context.Request.Path.ToString(), Model.Continuation)">Next Page</a>
	</div>
}