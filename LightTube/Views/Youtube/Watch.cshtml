@using InnerTube.Renderers
@model WatchContext

<div class="watch-page">
	<div class="player-container" style="color:white">
		<partial name="Player" model="Model.Player"/>
	</div>
	<div class="info-container">
		<div class="ml-2 title">
			@Model.Video.Title
		</div>
		<div class="buttons">
			<div class="interaction-buttons">
				<div class="interaction-button">
					<svg class="icon" width="20" height="20" fill="currentColor">
						<use xlink:href="/svg/bootstrap-icons.svg#hand-thumbs-up"/>
					</svg>
					<div class="interaction-button__text">
						@Model.Video.LikeCount
					</div>
				</div>
				<vr></vr>
				<div class="interaction-button">
					<svg class="icon" width="20" height="20" fill="currentColor">
						<use xlink:href="/svg/bootstrap-icons.svg#hand-thumbs-down"/>
					</svg>
					<div class="interaction-button__text">
						@(Model.Dislikes == -1 ? "Dislike" : Model.Dislikes.ToKMB())
					</div>
				</div>
			</div>
			<div class="interaction-buttons">
				<div class="interaction-button">
					<svg class="icon" width="20" height="20" fill="currentColor">
						<use xlink:href="/svg/bootstrap-icons.svg#folder-plus"/>
					</svg>
					<div class="interaction-button__text">
						Save
					</div>
				</div>
			</div>
			<div class="interaction-buttons">
				<a class="interaction-button" href="/download/@Model.Video.Id">
					<svg class="icon" width="20" height="20" fill="currentColor">
						<use xlink:href="/svg/bootstrap-icons.svg#download"/>
					</svg>
					<div class="interaction-button__text">
						Download
					</div>
				</a>
			</div>
			<div class="interaction-buttons">
				<a class="interaction-button" href="https://youtube.com/watch@(Context.Request.QueryString)">
					<svg class="icon" width="20" height="20" fill="currentColor">
						<use xlink:href="/svg/bootstrap-icons.svg#youtube"/>
					</svg>
				</a>
			</div>
		</div>
		<div class="video-channel-info">
			<img loading="lazy"
				 class="avatar"
			     src="@Model.Video.Channel.Avatar"
			     alt="@Model.Video.Channel.Title">
			<div class="video-channel-info__name">
				<a class="ml-1 title" href="/channel/@Model.Video.Channel.Id">@Model.Video.Channel.Title</a>
				<span class="subs">@Model.Video.Channel.Subscribers</span>
			</div>
				<partial name="SubscribeButton" model="Model.Video.Channel.Id"/>
		</div>
		<details class="description">
			<summary>
				@Model.Video.ViewCount • @Model.Video.DateText • Click to toggle description
			</summary>
			@Html.Raw(Model.Video.Description)
		</details>
	</div>
	<div class="comments-container">
		@if (Model.Comments is not null)
		{
			@foreach (IRenderer renderer in Model.Comments.Contents)
			{
				<partial name="Renderer" model="renderer"/>
			}
		}
		else
		{
			@:Comments are disabled
		}
	</div>
	<div class="second-column">
		@if (Model.Playlist is not null)
		{
			<details class="playlist-view-container" open>
				<summary class="playlist-view__header">
					<a href="/playlist?list=@Model.Playlist.PlaylistId" class="ml-1 title" title="@Model.Playlist.Title">
						@Model.Playlist.Title
					</a>
					<div class="ml-1">@Model.Playlist.Channel.Title • @(Model.Playlist.CurrentIndex + 1) / @Model.Playlist.TotalVideos</div>
				</summary>
				<div class="playlist-view__content">
					@foreach (IRenderer renderer in Model.Playlist.Videos)
					{
						<partial name="Renderer" model="renderer"/>
					}
				</div>
			</details>
		}
		<div class="recommendations-container compact-renderer-list">
			@foreach (IRenderer renderer in Model.Video.Recommended)
			{
				<partial name="Renderer" model="renderer"/>
			}
		</div>
	</div>
</div>
<script>
	const playerContainerElement = document.querySelector(".player-container");
	const playlistContainerElement = document.querySelector(".playlist-view-container");
	const updatePlaylistElementHeight = () => {
		if (!playlistContainerElement.open)
			playlistContainerElement.style.height = "94px";
		else if (window.innerWidth > 1085)
			playlistContainerElement.style.height = playerContainerElement.clientHeight + "px";
		else
			playlistContainerElement.style.height = "unset";
		requestAnimationFrame(() => updatePlaylistElementHeight());
	}
	updatePlaylistElementHeight();
</script>